using System;
using Gtk;
using System.IO;
using System.Text;
using System.Collections.Generic;
using Vray;

namespace VrayMat2Blender
{
	public class BlenderMtlCreator
	{
		private String tabs = String.Empty;

		public BlenderMtlCreator ()
		{
		}

		public String CreateScript(VrScene scene){

			String mtlType = String.Empty;
			String mtlName = String.Empty;
			Dictionary<string, System.Object> mtlParam = new Dictionary<string, System.Object>();
			String Script = String.Empty;

			Script += "#----------------------------------------------------------\n";
			Script += "# The script generated by VrayMat2Blender \n";
			Script += "#----------------------------------------------------------\n";
			Script += "import bpy, os\n\n";
			//Script += "def run(origin):\n";

			foreach (KeyValuePair<string, Dictionary<string, Dictionary<string, System.Object>>> pair in scene.VRayMtl){
				// это имя материала или карты
				// его посто запоминаем 1 раз
				mtlName = pair.Key;

				foreach (KeyValuePair<string, Dictionary<string, System.Object>> pairMtl in pair.Value){
					// это тип материала или карты
					// его просто запоминаем один раз
					mtlType = pairMtl.Key;
					foreach (KeyValuePair<string, System.Object> pairObj in pairMtl.Value){
						// это список параметров
						// их копим в массив
						mtlParam.Add (pairObj.Key, pairObj.Value);
					}
				}

				// когда данные накоплены, отдаем их функции которая сделает выбор и сформирует код
				// функция просто возвращает нужный код
				Script += GetBlenderCode(mtlType, mtlName, mtlParam);
				mtlType = String.Empty;
				mtlName = String.Empty;
				mtlParam = new Dictionary<string, System.Object>();
			}

			return Script;
		}

		private string GetBlenderCode(String mtlType, String mtlName, Dictionary<string, System.Object> mtlParam){
			string Script = String.Empty;

			switch (mtlType)
			{
			case "BitmapBuffer": 
				Script += CreateBitmapBuffer (mtlName, mtlParam);
				break;
			case "UVWGenChannel":
				Script += CreateUVWGenChannel (mtlName, mtlParam);
				break;
			case "BRDFDiffuse":
				BRDFDiffuse diff = new BRDFDiffuse ();
				Script += diff.GenOut();
				Script += CreateBRDFDiffuse (mtlName, mtlParam);
				break;
				//default:
				//Console.WriteLine("Default case");
				//break;
			}

			//Script += mtlType + " - " + mtlName + " - \n";
		
		return Script;
		}

		private string CreateBitmapBuffer(String mtlName, Dictionary<string, System.Object> mtlParam){
			String Script = String.Empty;

			Script += tabs+"# Load image file. Change here if the snippet folder is \n";
			Script += tabs+"# not located in you home directory.\n";
			// нужно добавить экранирование символов
			Script += tabs+"realpath = os.path.expanduser(r'"+mtlParam["file"]+"')\n";
			Script += tabs+"try:\n";
			Script += tabs+"\timg = bpy.data.images.load(realpath)\n";
			Script += tabs+"except:\n";
			Script += tabs+"\traise NameError(\"Cannot load image %s\" % realpath)\n";
			Script += "\n";
			Script += tabs+"# Create image texture from image\n";
			Script += tabs+"Tex_"+mtlName+" = bpy.data.textures.new('"+mtlName+"', type = 'IMAGE')\n";
			Script += tabs+"Tex_"+mtlName+".image = img\n\n\n";

			return Script;
		}

		private string CreateUVWGenChannel(String mtlName, Dictionary<string, System.Object> mtlParam){
			String Script = String.Empty;
		
			return Script;
		}

		private string CreateBRDFDiffuse(String mtlName, Dictionary<string, System.Object> mtlParam){
			String Script = String.Empty;

			Script += tabs+"mat_"+mtlName+" = bpy.data.materials.new(\""+mtlName+"\")\n";
			Script += tabs+"mat_"+mtlName+".vray.type = 'BRDFVRayMtl'\n";

			Script += CreateParametrs ("BRDFVRayMtl", mtlParam);

			BRDFDiffuse test = new BRDFDiffuse ();

			return Script;
		}

		private string CreateParametrs (String mtlType, Dictionary<string, System.Object> mtlParam){
			String Script = String.Empty;

			// тут нужно перебрать все параметры материала, но заполнить только те, которые пришли 
			// из mtlParam, остальные оставить без изменений

			return Script;
		}

	}
}



/*
 * 
 * ''' BRDFVRayMtl, BRDFSSS2Complex, BRDFLight, BRDFCarPaint, BRDFHair3, BRDFLayered '''

import bpy
 
def makeMaterial(name, diffuse, specular, alpha):
    print("tests")
    mat = bpy.data.materials.new(name)
    mat.vray.type = 'BRDFHair3'
    print(mat.vray.type)
    mat.diffuse_color = diffuse
    mat.diffuse_shader = 'LAMBERT' 
    mat.diffuse_intensity = 1.0 
    mat.specular_color = specular
    mat.specular_shader = 'COOKTORR'
    mat.specular_intensity = 0.5
    mat.alpha = alpha
    mat.ambient = 1
    return mat
 
def setMaterial(ob, mat):
    me = ob.data
    me.materials.append(mat)
 
def run(origin):
    # Create two materials
    red = makeMaterial('Red', (1,0,0), (1,1,1), 1)
    blue = makeMaterial('BlueSemi', (0,0,1), (0.5,0.5,0), 0.5)
 
    # Create red cube
    bpy.ops.mesh.primitive_cube_add(location=origin)
    setMaterial(bpy.context.object, red)
    # and blue sphere
    bpy.ops.mesh.primitive_uv_sphere_add(location=origin)
    bpy.ops.transform.translate(value=(1,0,0))
    setMaterial(bpy.context.object, blue)
 
if __name__ == "__main__":
    run((0,0,0))

*/
